package com.capitalone.sassy.util;

import com.jayway.restassured.RestAssured;
import com.jayway.restassured.path.json.JsonPath;
import com.jayway.restassured.path.xml.XmlPath;
import com.jayway.restassured.response.Response;

import org.apache.commons.io.FileUtils;
import org.apache.http.conn.ssl.X509HostnameVerifier;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.junit.Assert;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.URL;
import java.security.*;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.config.SSLConfig.sslConfig;

//import org.w3c.dom.Document;

public class RESTUtil extends Logging {

	private Properties systemProperties;
	public String strBaseUrl;
	protected String serviceURL;

	HashMap<String, String> mapQS = new HashMap<String, String>(); // stores
																	// query
																	// strings
	HashMap<String, String> mapReqHeader = new HashMap<String, String>(); // stores
																			// request
																			// headers
	HashMap<String, String> mapResponse = new HashMap<String, String>(); // stores
																			// expected
																			// response
																			// parameters
	HashMap<String, String> mapPathParam = new HashMap<String, String>(); // stores
																			// Query
																			// String
																			// parameters
	HashMap<String, String> mapFormParam = new HashMap<String, String>(); // stores
																			// Form
																			// Parameters
	public RESTConfig rest_config = null;

	String contentType = new String();
	String jsonText = new String();
	File requestFile = null;
	File responseFile = null;
	PrintStream requestStream = null;
	Response response = null; // stores response from rest
	File certificate, trustStoreLocation = null;
	String certPassword = null;
	String authUserName = null;
	String authPassword = null;
	String strEnv = "baseURL";

	public RESTUtil() throws Exception {
		logger = LoggerFactory.getLogger(RESTUtil.class);
		rest_config = new RESTConfig();
		try {
			URL urlConfigFile = RESTUtil.class.getClassLoader().getResource(
					"restconfig.properties");

			File strFile = new File(urlConfigFile.toURI());
			rest_config.openPropertyFile(strFile);
		} catch (Exception ex) {
			logger.error("Unable to read restconfig.properties file");
			ex.printStackTrace();
		}
	}

	public void setUpService() throws Exception {
		try {
			systemProperties = System.getProperties();
			// systemProperties.setProperty("http.proxyHost",
			// "proxy.kdc.capitalone.com");
			// systemProperties.setProperty("http.proxyPort", "8099");
			// strEnv = "baseURL" + System.getProperty("env");
			// strBaseUrl =
			// rest_config.getPropertyName(strEnv);//"https://rtm-qsb3:8513/loans/home-loans/applicants/search";
			strBaseUrl = rest_config.getPropertyName("baseURL");
		} catch (Exception ex) {
			logger.error("Unable to read base url from restconfig.properties file");
			ex.printStackTrace();
		}

	}

	public void setUpRequest(String strRequestFile,
			HashMap<String, String> mapHeader) throws Exception {
		try {
			mapReqHeader = mapHeader;
			if (!strRequestFile.equals("NA")) {
				URL urlFilePath = RESTUtil.class.getClassLoader().getResource(
						"Request/" + strRequestFile);
				requestFile = new File(urlFilePath.toURI());

				// Note - Enhance the code so if Header.Accept is xml, then it
				// should use something like convertToXML function
				jsonText = readFile(requestFile);
			}
			// Initialize rest assured settings
			this.restAssuredSettings();
		} catch (Exception ex) {
			logger.error("Unable to do setUpRequest");
			ex.printStackTrace();
		}
	}

	public void setUpRequest(HashMap<String, String> mapHeader)
			throws Exception {
		try {
			mapReqHeader = mapHeader;
			// Initialize rest assured settings
			this.restAssuredSettings();
		} catch (Exception ex) {
			logger.error("Unable to do setUpRequest");
			ex.printStackTrace();
		}
	}

	public String GETResponse(String serviceURL) {

		response =

		given().log().all().headers(mapReqHeader).urlEncodingEnabled(false)
				.when().get(strBaseUrl + serviceURL);
		String json = response.asString();
		return json;
	}

	public String DELETEResponse(String serviceURL) {
		response =

		given().log().all().headers(mapReqHeader).urlEncodingEnabled(false)
				.when().delete(strBaseUrl + serviceURL);
		String json = response.asString();
		return json;
	}

	public String POSTResponse(String serviceURL) {
		response = given().urlEncodingEnabled(false).log().all()
				.headers(mapReqHeader).body(jsonText).when()
				.post(strBaseUrl + serviceURL);

		// System.out.println(response.asString());
		String json = response.asString();
		return json;
	}

	public String PUTResponse(String serviceURL) {
		response =
		// given
		given().urlEncodingEnabled(false).log().all().headers(mapReqHeader)
				.body(jsonText).when().put(strBaseUrl + serviceURL);

		// System.out.println(response.asString());
		String json = response.asString();
		return json;
	}

	public String parseJSON(String json, String strRoot, String strField,
			String strExpectedValue) {
		String strResult = null;
		JsonPath jsonPath = new JsonPath(json).setRoot(strRoot);
		List<String> lstField = jsonPath.get(strField);
		if (lstField.contains(strExpectedValue)) {

			strResult = lstField.toString();
			System.out.println("Passed:Field=" + strField
					+ " matched the expected value=" + strExpectedValue);
			this.logger.info("Passed:Field=" + strField
					+ " matched the expected value=" + strExpectedValue);
		} else {
			strResult = lstField.toString();
			this.logger.info("Failed:Field=" + strField + " expected value="
					+ strExpectedValue + " and actual value="
					+ lstField.toString());
		}

		return strResult;

	}

	public String parseJSON(String json, String strRoot, String strField,
			int strExpectedValue) {
		String strResult = null;
		JsonPath jsonPath = new JsonPath(json).setRoot(strRoot);
		List<String> lstField = jsonPath.get(strField);
		if (lstField.contains(strExpectedValue)) {

			strResult = lstField.toString();
			System.out.println("Passed:Field=" + strField
					+ " matched the expected value=" + strExpectedValue);
			this.logger.info("Passed:Field=" + strField
					+ " matched the expected value=" + strExpectedValue);
		} else {
			strResult = lstField.toString();
			this.logger.info("Failed:Field=" + strField + " expected value="
					+ strExpectedValue + " and actual value="
					+ lstField.toString());
		}

		return strResult;
	}

	public String parseJSON(String json, String strField,
			String strExpectedValue) {
		String strResult = null;
		try {
			JsonPath jsonPath = new JsonPath(json);
			strResult = jsonPath.get(strField).toString();
			if (strResult.contains(strExpectedValue)) {
				
				
				this.logger.info("Passed:Field=" + strField
						+ " matched the expected value=" + strExpectedValue);
			} else {
				this.logger.info("Failed:Field=" + strField
						+ " expected value=" + strExpectedValue
						+ " and actual value=" + strResult);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			strResult = "Failed";
		}
		return strResult;
	}
	
	public String parseJSONroot(String json, String strRoot,
			String strExpectedValue) {
		String strResult = null;
		try {
			strResult =  new JsonPath(json).get(strRoot).toString();
			if (strResult.contains(strExpectedValue)) {
				System.out.println("Passed:Field=" + strRoot
						+ " matched the expected value=" + strExpectedValue);
				this.logger.info("Passed:Field=" + strRoot
						+ " matched the expected value=" + strExpectedValue);
			} else {
				this.logger.info("Failed:Field=" + strRoot
						+ " expected value=" + strExpectedValue
						+ " and actual value=" + strResult);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			strResult = "Failed";
		}
		return strResult;
	}

	public String parseXML(String xml, String strFieldName,
			String strExpectedValue) {
		String strResult = null;

		XmlPath xmlPath = new XmlPath(xml);
		String strField = xmlPath.get(strFieldName).toString();
		if (strField.contains(strExpectedValue)) {
			strResult = strField.toString();
			logger.info("Passed:Field=" + strFieldName
					+ " matched the expected value=" + strExpectedValue);
		} else {
			strResult = strField.toString();
			logger.info("Failed:Field=" + strFieldName + " expected value="
					+ strExpectedValue + " and actual value="
					+ strField.toString());
		}
		return strResult;
	}

	public String parseXML(String xml, String strFieldName) {
		XmlPath xmlPath = new XmlPath(xml);
		String strFieldValue = xmlPath.get(strFieldName).toString();
		return strFieldValue;
	}

	public String parseXML(String xml, String strRoot, String strFieldName,
			String strExpectedValue) {
		String strResult = null;

		XmlPath xmlPath = new XmlPath(xml).setRoot(strRoot);

		String strField = xmlPath.get(strFieldName);
		if (strField.contains(strExpectedValue)) {
			strResult = strField.toString();
			this.logger.info("Passed:Field=" + strField
					+ " matched the expected value=" + strExpectedValue);
		} else {
			strResult = strField.toString();
			this.logger.info("Failed:Field=" + strField + " expected value="
					+ strExpectedValue + " and actual value="
					+ strField.toString());
		}
		return strResult;
	}

	/*
	 * public String prettyFormatXML(String xml){ String strPrettyXML=null; try{
	 * StringWriter stringWriter = new StringWriter(); Node node = new
	 * XmlParser().parseText(xml); new XmlNodePrinter(new
	 * PrintWriter(stringWriter)).print(node); strPrettyXML =
	 * stringWriter.toString(); System.out.println(stringWriter.toString()); }
	 * catch(Exception ex){ logger.error("Unable to pretty format XML");
	 * ex.printStackTrace(); }
	 * 
	 * return strPrettyXML; }
	 */

	public String prettyFormatXML(String strXml) {
		String xml = strXml;
		String result = null;
		try {
			Document doc = DocumentHelper.parseText(xml);
			StringWriter sw = new StringWriter();
			OutputFormat format = OutputFormat.createPrettyPrint();
			XMLWriter xw = new XMLWriter(sw, format);
			xw.write(doc);
			System.out.print(xw.toString());
			result = sw.toString();
		} catch (Exception ex) {
			logger.error("Unable to pretty format XML");
			ex.printStackTrace();
		}
		return result;
	}

	public String CompareResponse(String strExpectedResponseFile,
			String strActualResponse) {
		String strResult = null;
		try {
			URL urlFilePath = RESTUtil.class.getClassLoader().getResource(
					"Response/" + strExpectedResponseFile);
			responseFile = new File(urlFilePath.toURI());
			String strExpectedResponse = readFile(responseFile);

			if (strActualResponse.contains(strExpectedResponse)) {
				this.logger
						.info("Passed:Actual response matched the expected response file="
								+ strExpectedResponseFile);
				strResult = "Passed";
			} else {
				System.out
						.println("Failed:Actual response did not matched the expected response file");
				this.logger.info("Failed:Actual response =" + strActualResponse
						+ " and \n expected response=" + strExpectedResponse);
				strResult = "Failed";
			}

		} catch (Exception ex) {
			ex.printStackTrace();
			strResult = "Failed";
		}
		return strResult;

	}

	public String readExpectedResponse(String filename) {
		String strExpectedResponse = null;
		try {
			URL urlFilePath = RESTUtil.class.getClassLoader().getResource(
					"Response/" + filename);
			File strFilePath = new File(urlFilePath.toURI());
			strExpectedResponse = FileUtils.readFileToString(strFilePath,
					"ASCII");
		} catch (Exception ex) {
			strExpectedResponse = "";
			ex.printStackTrace();
		}

		return strExpectedResponse;
	}

	public String readFile(File filename) {
		String content = null;
		// File file = new File(filename); //for ex foo.txt
		File file = filename;
		try {
			FileReader reader = new FileReader(file);
			char[] chars = new char[(int) file.length()];
			reader.read(chars);
			content = new String(chars);
			reader.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return content;
	}

	@SuppressWarnings("deprecation")
	public void ValidateStatusCode(int intStatusCode) {

		int actStatusCode = response.getStatusCode();
		try {
			Assert.assertEquals(intStatusCode, actStatusCode);
			logger.info("Passed:Response status code matched the expected value="
					+ intStatusCode);

		} catch (Exception ex) {
			ex.printStackTrace();

			logger.info("Failed:Expected status code=" + intStatusCode
					+ " did not match actual status code=" + actStatusCode);
		}

	}

	@SuppressWarnings("deprecation")
	protected void restAssuredSettings() {

		// Rest Assured settings
		String hostA = strBaseUrl;
		try {
			URL certificateURL = RESTUtil.class.getClassLoader().getResource(
					rest_config.getPropertyName("certificateFile"));// "C:\\Users\\FOP660\\Documents\\workspace\\testrestapi\\src\\test\\resources\\rtmqa-clientid.p12";
			certificate = new File(certificateURL.toURI());
			certPassword = rest_config.getPropertyName("certificatePwd");
			authUserName = rest_config.getPropertyName("authUser");
			authPassword = rest_config.getPropertyName("authPwd");
			URL trustStoreLocationURL = RESTUtil.class.getClassLoader()
					.getResource(rest_config.getPropertyName("trustStore"));// "C:\\Users\\FOP660\\Documents\\workspace\\testrestapi\\src\\test\\resources\\cacerts";
			trustStoreLocation = new File(trustStoreLocationURL.toURI());
		} catch (Exception ex) {
			logger.error("Unable to do setUpRequest");
			ex.printStackTrace();
		}

		// Configure Host name
		if (hostA.isEmpty()) {

		} else {

			RestAssured.baseURI = hostA;
		}

		// Configure Certificate
		if (certificate == null) {

			
	RestAssured.useRelaxedHTTPSValidation();

		} else {
			FileInputStream instream1 = null;
			FileInputStream instream2 = null;
			KeyStore trustStore = null;
			KeyStore keyStore = null;

			try {
				instream1 = new FileInputStream(certificate);
				keyStore = KeyStore.getInstance("PKCS12");
				keyStore.load(instream1, certPassword.toCharArray());

				instream2 = new FileInputStream(trustStoreLocation);
				trustStore = KeyStore.getInstance("jks");
				trustStore.load(instream2, "changeit".toCharArray());

			} catch (Exception e) {
				logger.error("Issue with the certificate or password");
			} finally {
				try {
					instream1.close();
					// instream2.close();
				} catch (Exception e) {
				}
			}

			org.apache.http.conn.ssl.SSLSocketFactory lSchemeSocketFactory = null;
			X509HostnameVerifier hostnameVerifier = org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;

			try {
				lSchemeSocketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(
						keyStore, certPassword, trustStore);
				lSchemeSocketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(
						"TLSv1", keyStore, certPassword, trustStore, null,
						hostnameVerifier);
				lSchemeSocketFactory.setHostnameVerifier(hostnameVerifier);
				RestAssured.config = RestAssured.config().sslConfig(
						sslConfig().with()
								.sslSocketFactory(lSchemeSocketFactory).and()
								.allowAllHostnames());

			} catch (KeyManagementException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (UnrecoverableKeyException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchAlgorithmException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (KeyStoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	public String GETResponse(String strKey, String strAccept,
			String strContent, String strUserId) {
		// TODO Auto-generated method stub
		return null;
	}

	//public String GetBodyText() {
		//return jsonText;
	//}

}


-- 
Thanks & Regards
-------------------------------------
S.Ravisankar
94865 42296